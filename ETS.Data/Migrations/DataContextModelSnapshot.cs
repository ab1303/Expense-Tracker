// <auto-generated />
using ETS.Data;
using ETS.Domain.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ETS.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ETS.Domain.ExpenseCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateLogin")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DateChanged");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("UpdateLogin")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ExpenseCategories");
                });

            modelBuilder.Entity("ETS.Domain.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<long?>("CategoryId");

                    b.Property<string>("CreateLogin")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DateChanged");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("Details");

                    b.Property<int>("Frequency");

                    b.Property<string>("FrequencyString");

                    b.Property<long?>("PaidById");

                    b.Property<long?>("PaidForId");

                    b.Property<string>("UpdateLogin")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PaidById");

                    b.HasIndex("PaidForId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ETS.Domain.UserDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateLogin")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DateChanged");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("Mobile");

                    b.Property<string>("UpdateLogin")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("ETS.Domain.Transaction", b =>
                {
                    b.HasOne("ETS.Domain.ExpenseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ETS.Domain.UserDetail", "PaidBy")
                        .WithMany()
                        .HasForeignKey("PaidById");

                    b.HasOne("ETS.Domain.UserDetail", "PaidFor")
                        .WithMany()
                        .HasForeignKey("PaidForId");
                });
#pragma warning restore 612, 618
        }
    }
}
